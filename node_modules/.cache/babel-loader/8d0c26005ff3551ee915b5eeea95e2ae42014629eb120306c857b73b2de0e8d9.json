{"ast":null,"code":"var _jsxFileName = \"/Users/surbhi/Desktop/wellness-retreat/src/components/DateDropdown.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RetreatsFilter = ({\n  setRetreats\n}) => {\n  _s();\n  const [selectedRange, setSelectedRange] = useState('');\n\n  // Function to convert date range to Unix timestamps\n  const getDateRange = range => {\n    const [startYear, endYear] = range.split('-').map(Number);\n    const startDate = new Date(startYear, 0, 1); // January 1st of the start year\n    const endDate = new Date(endYear - 1, 11, 31); // December 31, 2023\n    return {\n      start: Math.floor(startDate.getTime() / 1000),\n      // Convert to Unix timestamp\n      end: Math.floor(endDate.getTime() / 1000)\n    };\n  };\n\n  // Function to fetch data from API and filter based on date range\n  const fetchDataAndFilter = async range => {\n    const {\n      start,\n      end\n    } = getDateRange(range);\n    try {\n      const response = await axios.get('https://669f704cb132e2c136fdd9a0.mockapi.io/api/v1/retreats');\n      const filtered = response.data.filter(retreat => {\n        const retreatDate = retreat.date; // Assuming `date` is in Unix timestamp format\n        return retreatDate >= start && retreatDate < end;\n      });\n      setRetreats(filtered);\n    } catch (error) {\n      console.error('Error fetching retreats', error);\n    }\n  };\n\n  // Handle changes in the date range selection\n  const handleRangeChange = event => {\n    const range = event.target.value;\n    setSelectedRange(range);\n    fetchDataAndFilter(range);\n  };\n\n  // Effect to fetch data initially (if needed)\n  useEffect(() => {\n    fetchDataAndFilter(selectedRange); // Fetch initially if there's a default range\n  }, [selectedRange]);\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    className: \"dropbtn\",\n    onChange: handleRangeChange,\n    value: selectedRange,\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      children: \"Filter by date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"2023-2024\",\n      children: \"2023-2024\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"2024-2025\",\n      children: \"2024-2025\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n};\n_s(RetreatsFilter, \"vjFvgwmqSW+MVdFQ7SJtW2cGqAs=\");\n_c = RetreatsFilter;\nexport default RetreatsFilter;\nvar _c;\n$RefreshReg$(_c, \"RetreatsFilter\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","RetreatsFilter","setRetreats","_s","selectedRange","setSelectedRange","getDateRange","range","startYear","endYear","split","map","Number","startDate","Date","endDate","start","Math","floor","getTime","end","fetchDataAndFilter","response","get","filtered","data","filter","retreat","retreatDate","date","error","console","handleRangeChange","event","target","value","className","onChange","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/surbhi/Desktop/wellness-retreat/src/components/DateDropdown.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst RetreatsFilter = ({setRetreats}) => {\n  const [selectedRange, setSelectedRange] = useState('');\n\n  // Function to convert date range to Unix timestamps\n  const getDateRange = (range) => {\n    const [startYear, endYear] = range.split('-').map(Number);\n    const startDate = new Date(startYear, 0, 1); // January 1st of the start year\n    const endDate = new Date(endYear - 1, 11, 31); // December 31, 2023\n    return {\n      start: Math.floor(startDate.getTime() / 1000), // Convert to Unix timestamp\n      end: Math.floor(endDate.getTime() / 1000)\n    };\n  };\n\n  // Function to fetch data from API and filter based on date range\n  const fetchDataAndFilter = async (range) => {\n    const { start, end } = getDateRange(range);\n    try {\n      const response = await axios.get('https://669f704cb132e2c136fdd9a0.mockapi.io/api/v1/retreats');\n      const filtered = response.data.filter(retreat => {\n        const retreatDate = retreat.date; // Assuming `date` is in Unix timestamp format\n        return retreatDate >= start && retreatDate < end;\n      });\n      setRetreats(filtered);\n    } catch (error) {\n      console.error('Error fetching retreats', error);\n    }\n  };\n\n  // Handle changes in the date range selection\n  const handleRangeChange = (event) => {\n    const range = event.target.value;\n    setSelectedRange(range);\n    fetchDataAndFilter(range);\n  };\n\n  // Effect to fetch data initially (if needed)\n  useEffect(() => {\n    fetchDataAndFilter(selectedRange); // Fetch initially if there's a default range\n  }, [selectedRange]);\n\n  return (\n      <select className=\"dropbtn\" onChange={handleRangeChange} value={selectedRange}>\n        <option value=\"\">Filter by date</option>\n        <option value=\"2023-2024\">2023-2024</option>\n        <option value=\"2024-2025\">2024-2025</option>\n      </select>\n\n    \n  );\n};\n\nexport default RetreatsFilter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}